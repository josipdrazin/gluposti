"""
Kako napraviti rječnik čije
vrijednosti su iskazane kao liste sa
nasumičnom količinom elemenata koji
su sastavljeni od nasumično odabranih
znamenki od 1 do 10.
"""

import random

########### Verzija 1 ########### 

d = {}
for i in range(10):
    d[i] = []
    for j in range(10):
        d[i] += [j]
    d[i].sort(key = lambda x: random.random())
# ili
    random.shuffle(d[i])

# Možemo koristiti
# d[i][:random.randint(0,len(d[i]-1))]
# ili 
# d[i][random.randint(0,len(d[i]-1)):]
# ili brojne druge načine za rezanje listi.

    d[i][:random.randint(0,len(d[i]-1))]
    
########### Verzija 2 ########### 

# Verzija 2 se ne može više skratiti no što jest.
# U usporedbi sa prvom verzijom,
# u ovoj verziji se neke stvari ne mogu automatizirati
# kao što je naprimjer u prvoj verziji 
# d[i][:random.randint(0,len(d[i]-1))],
# len(d[i]) se ne može koristiti
# jer je rječnik prazan ili
# u slučaju da nije prethodno definiran, nepostojeći.
# Međutim, ova verzija ima svoje prednosti.
# kao što su, recimo, ako varijabla "d" nije prethodno definirana
# onda se njeno definiranje i dodjeljivanje vrijednosti 
# sve događa na istom mjestu u memoriji ili tako nešto ...Pretpostavljam.
# Uglavnom, meni se ovakav način drfiniranja varijable i dodijeljivanja vrijednosti, pokazao brži,
# iako nemam pojma što se zapravo događa u pozadini.
# Najbitnije je da funkcionira.
d = {i : sorted((j for j in range(10)), key=lambda x:random.random())[:random.randint(0, 9)] for i in range(10)}

# dict_vals_len - lista duljina vrijednosti svakog pojedinog "ključića" u rječniku, u ovom slučaju količina elemenata u svakoj pojedinoj listi u rječniku. 
dict_vals_len = [len(v) for k,v in d.items()]

# dict_min_val_index - indeks prve pronađene liste u rječniku koja sadrži najmanje elemenata.
# može se dobiti i na jednostavniji način.
# naprimjer: dict_vals_len.index(min(dict_vals_len))
dict_min_val_index = [[len(v) for k,v in d.items() ].index(min([len(v) for k,v in d.items()]))]

# dict_min_val - duljina prve pronađene liste u rječniku koja sadrži najmanje elemenata.
# ekvivalent dict_vals_len[dict_min_val_index] ili len(d[list(d.keys())[dict_min_val_index]]) ili dict_vals_len[dict_vals_len.index(min(dict_vals_len))]
dict_min_val= [len(v) for k,v in d.items() ][ list(len(v) for k,v in d.items() ).index(min(list(len(v) for k,v in d.items())))]

# i tako malo pomalo dok ne pomiješaš kabele



>>> d={k:v for k,v in sorted({i:locals()[i] for i in locals() if i in ["q","w","e","r"]}.items(),key=lambda item:item[1])}
>>> d
{'e': 0, 'w': 2, 'q': 3, 'r': 3} 
>>>


>>> import numpy as np
>>> import random
>>> im = np.zeros((100,100,3),np.uint8)
>>> im
array([[[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       ...,

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]],

       [[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        ...,
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]]], shape=(100, 100, 3), dtype=uint8)
>>> p = lambda a: a and [255,255,255] or [0,0,0]
>>> for i in range(100):
...     for j in range(100):
,..         im[i,j]=p(random.randint(0,1))
...
>>> im
array([[[  0,   0,   0],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [255, 255, 255]],

       [[255, 255, 255],
        [255, 255, 255],
        [255, 255, 255],
        ...,
        [  0,   0,   0],
        [  0,   0,   0],
        [255, 255, 255]],

       [[255, 255, 255],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [255, 255, 255],
        [  0,   0,   0],
        [255, 255, 255]],

       ...,

       [[255, 255, 255],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [255, 255, 255],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [255, 255, 255],
        [255, 255, 255]],

       [[255, 255, 255],
        [  0,   0,   0],
        [  0,   0,   0],
        ...,
        [  0,   0,   0],
        [255, 255, 255],
        [  0,   0,   0]]], shape=(100, 100, 3), dtype=uint8)
>>>
